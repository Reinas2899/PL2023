{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "14156bbf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LEVANTAR\n",
      "maq: Introduza moedas.\n",
      "MOEDA 2e,20c,10c\n",
      "maq: saldo = 2.30\n",
      "T=00123123123\n",
      "maq: saldo = 0.80\n",
      "POUSAR\n",
      "maq: troco = 1x50c, 1x20c, 1x10c; Volte sempre!\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_29544\\53650106.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     53\u001b[0m \u001b[1;32mwhile\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     54\u001b[0m     \u001b[1;31m# Obter input do utilizador\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 55\u001b[1;33m     \u001b[0mcomando\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     56\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     57\u001b[0m     \u001b[1;31m# Obter o comando e o argumento\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m   1175\u001b[0m                 \u001b[1;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1176\u001b[0m             )\n\u001b[1;32m-> 1177\u001b[1;33m         return self._input_request(\n\u001b[0m\u001b[0;32m   1178\u001b[0m             \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1179\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"shell\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1217\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1218\u001b[0m                 \u001b[1;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1219\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Interrupted by user\"\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1220\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1221\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Invalid Message:\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Estados da máquina de estados\n",
    "estado_inicial = 'INICIAL'\n",
    "estado_levantado = 'LEVANTADO'\n",
    "estado_moeda = 'MOEDA'\n",
    "estado_chamada = 'CHAMADA'\n",
    "estado_pousado = 'POUSADO'\n",
    "\n",
    "# Dicionário de transições\n",
    "transicoes = {\n",
    "    estado_inicial: {\n",
    "        'LEVANTAR': estado_levantado,\n",
    "    },\n",
    "    estado_levantado: {\n",
    "         'MOEDA': estado_moeda,\n",
    "    },\n",
    "    estado_moeda: {\n",
    "        'MOEDA': estado_moeda,\n",
    "        'T': estado_chamada,\n",
    "        'ABORTAR': estado_inicial,\n",
    "    },\n",
    "    estado_chamada: {\n",
    "        'T': estado_chamada,\n",
    "        'POUSAR': estado_pousado,\n",
    "        'ABORTAR': estado_inicial,\n",
    "    },\n",
    "    estado_pousado: {\n",
    "        'LEVANTAR': estado_levantado,\n",
    "    }\n",
    "}\n",
    "\n",
    "# Dicionário de valores de moedas\n",
    "valores_moedas = {\n",
    "    '1c': 0.01,\n",
    "    '2c': 0.02,\n",
    "    '5c': 0.05,\n",
    "    '10c': 0.10,\n",
    "    '20c': 0.20,\n",
    "    '50c': 0.50,\n",
    "    '1e': 1.00,\n",
    "    '2e': 2.00,\n",
    "}\n",
    "\n",
    "# Estado atual da máquina de estados\n",
    "estado_atual = estado_inicial\n",
    "\n",
    "# Variáveis de estado da máquina de estados\n",
    "saldo = 0\n",
    "chamada = ''\n",
    "\n",
    "# Loop principal da máquina de estados\n",
    "while True:\n",
    "    # Obter input do utilizador\n",
    "    comando = input()\n",
    "\n",
    "    # Obter o comando e o argumento\n",
    "    partes = re.match(r'(\\w+)(?:\\s+(.*))?$', comando)\n",
    "    partes2 = re.match(r'(\\w+)=(\\d+)?$', comando)\n",
    "    if partes:\n",
    "        comando, argumento = partes.groups()\n",
    "    elif partes2:\n",
    "        comando, argumento = partes2.groups()\n",
    "    else:    \n",
    "        continue\n",
    "    \n",
    "    # Verificar se o comando é válido para o estado atual\n",
    "    if comando not in transicoes[estado_atual]:\n",
    "        print('maq: Comando inválido para o estado atual.')\n",
    "        continue\n",
    "     # Transitar para o novo estado\n",
    "    estado_atual = transicoes[estado_atual][comando]\n",
    "    \n",
    "\n",
    "    # Executar ações específicas para cada comando\n",
    "    if comando == 'LEVANTAR':\n",
    "        estado_atual = estado_levantado\n",
    "        print(\"maq: Introduza moedas.\")\n",
    "        saldo = 0\n",
    "        \n",
    "    elif comando == 'MOEDA':\n",
    "        estado_atual = estado_moeda\n",
    "        # Adicionar o valor de cada moeda ao saldo\n",
    "        moedas = re.split(\",\",argumento)\n",
    "        for moeda in moedas:\n",
    "            if moeda not in valores_moedas:\n",
    "                print('maq: {0} - moeda inválida; saldo = {1:.2f}'.format(moeda, saldo))\n",
    "            else:\n",
    "                saldo += valores_moedas[moeda]\n",
    "        print('maq: saldo = {1:.2f}'.format(moeda, saldo))        \n",
    "    elif comando == 'T':\n",
    "        estado_atual = estado_chamada\n",
    "        # Verificar se o número de telefone é válido\n",
    "        if re.match(r'601\\d{6}', argumento) or re.match(r'641\\d{6}', argumento):\n",
    "            print('maq: Esse número não é permitido neste telefone. Queira inserir um novo número!')\n",
    "            estado_atual = estado_moeda\n",
    "        elif re.match(r'00\\d{9}', argumento):\n",
    "            if saldo<= 1.50:\n",
    "                print('maq: Saldo insuficiente para efetuar uma chamada para este número. Valor minimo 1.50')\n",
    "                estado_atual = estado_moeda\n",
    "            else:\n",
    "                saldo-=1.50\n",
    "                chamada=argumento\n",
    "        elif re.match(r'2\\d{8}', argumento):\n",
    "            if saldo<= 0.25:\n",
    "                print('maq: Saldo insuficiente para efetuar uma chamada para este número. Valor minimo 0.25')\n",
    "                estado_atual = estado_moeda\n",
    "            else:\n",
    "                saldo-=0.25\n",
    "                chamada=argumento\n",
    "        elif re.match(r'808\\d{6}', argumento):\n",
    "            if saldo<= 0.10:\n",
    "                print('maq: Saldo insuficiente para efetuar uma chamada para este número. Valor minimo 0.10')\n",
    "                estado_atual = estado_moeda\n",
    "            else:\n",
    "                saldo-=0.10\n",
    "                chamada=argumento        \n",
    "        else:\n",
    "            chamada = argumento\n",
    "        print('maq: saldo = {1:.2f}'.format(moeda, saldo))     \n",
    "    elif comando == 'POUSAR':\n",
    "        estado_atual = estado_pousado\n",
    "        # Calcular o troco\n",
    "        valor_troco = saldo\n",
    "        troco = {}\n",
    "        for moeda, valor in sorted(valores_moedas.items(), key=lambda x: -x[1]):\n",
    "            quantidade_moedas = int(valor_troco // valor)\n",
    "            if quantidade_moedas > 0:\n",
    "                troco[moeda] = quantidade_moedas\n",
    "                valor_troco -= quantidade_moedas * valor\n",
    "                \n",
    "        saldo = 0\n",
    "        # Imprimir mensagem de saída\n",
    "        if troco:\n",
    "            mensagem = 'troco = ' + ', '.join([f'{v}x{k}' for k, v in troco.items()]) + f'; Volte sempre!'\n",
    "        else:\n",
    "            mensagem = 'troco = 0; Volte sempre!'\n",
    "        print(f'maq: {mensagem}')\n",
    "\n",
    "        # Resetar a máquina de estados\n",
    "        estado_atual = estado_inicial\n",
    "        continue\n",
    "\n",
    "    elif comando == 'ABORTAR':\n",
    "        print('maq: Retornando moedas.')\n",
    "        saldo = 0\n",
    "        estado_atual = estado_inicial\n",
    "        continue\n",
    "        print('maq: Encerrando programa.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73296851",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46adfe22",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
